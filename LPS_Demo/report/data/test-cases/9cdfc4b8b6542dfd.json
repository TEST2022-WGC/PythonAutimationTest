{"uid":"9cdfc4b8b6542dfd","name":"正常卡号查询","fullName":"testcase_webapi.profiles.test_get_profile.TestGetProfile#test_get_profile","historyId":"c0b5537644eeb9392621319d0f8b8056","time":{"start":1678807308727,"stop":1678807332353,"duration":23626},"description":"通过一张存在的会员卡号，查询档案","descriptionHtml":"<p>通过一张存在的会员卡号，查询档案</p>\n","status":"failed","statusMessage":"AssertionError: assert 404 == 200\n +  where 404 = <Response [404]>.status_code\n +    where <Response [404]> = <testcase_webapi.profiles.test_get_profile.TestGetProfile object at 0x00000248E2D503A0>.res\n +  and   200 = <testcase_webapi.profiles.test_get_profile.TestGetProfile object at 0x00000248E2D503A0>.validate","statusTrace":"self = <testcase_webapi.profiles.test_get_profile.TestGetProfile object at 0x00000248E2D503A0>\ndata = {'description': '通过一张存在的会员卡号，查询档案', 'feature': 'Profiles模块', 'request': {'body': {'params': {'membershipCardNumber': '...zmLfCFq-68po54QJSA', 'Content-Type': 'application/json'}, 'method': 'GET', 'url': '/profiles/profile'}, 'skip': 0, ...}\n\n    @allure.link(name=\"点击查看接口swagger\", url=read_config_yaml('web_api', 'url') +\n                                           '/docs/index#!/Profiles/Profiles_GetProfile')\n    @allure.story('/profiles/profile   通过卡号、手机号、证件号、Email或外部会员号 获取一条会员档案信息')\n    @pytest.mark.parametrize('data', read_testcase_webapi_yaml(\"profiles/test_get_profile.yaml\"))\n    def test_get_profile(self, data):\n        allure.dynamic.title(data['title'])\n        allure.dynamic.description(data['description'])\n        # 判断是否跳过这条用例\n        skip = data['skip']\n        if skip == 1:\n            logger.info(f'是否跳过这条测试用例：{skip} 跳过')\n            pytest.skip(f'因为用例中skip值为{skip}，所以跳过本条用例')\n        elif skip == 0:\n            logger.info(f'用例中skip值为:{skip} 继续执行用例')\n            # 获取请求用的参数\n            self.url = '/api/v' + read_config_yaml('web_api', 'version') + \\\n                       data['request']['url']\n            self.method = data['request']['method']\n            # 更换headers的token\n            if data['request']['headers']['Authorization'] is None:\n                data['request']['headers']['Authorization'] = read_extract_yaml('api_token')\n            self.headers = data['request']['headers']\n            self.body = data['request']['body']\n            self.validate = data['validate']['codes']\n            logger.info(f'获取参数url:{self.url},method:{self.method},headers:{self.headers},params:{self.body}')\n            try:\n                self.res = RestClient(read_config_yaml('web_api', 'url')).request(url=self.url, method=self.method,\n                                                                                  headers=self.headers, **self.body)\n                # 上传响应报文\n                allure.attach(self.res.text, 'response body')\n            except Exception as e:\n                logger.exception(f'Exception信息：\\n + {e}')\n                logger.error(f'返回报文是：{self.res}')\n            finally:\n                success_code = (200, 201, 202, 203, 204)\n                failed_code = (400, 401, 402, 403, 404, 500, 501, 502, 503, 504)\n                if self.res.status_code in success_code:\n                    logger.info(f'响应状态码为：{self.res.status_code}')\n                    assert self.res.status_code == self.validate\n                    assert self.res.json()['id'] == data['validate']['equals']\n                elif self.res.status_code in failed_code:\n                    logger.info(f'响应状态码为：{self.res.status_code}')\n>                   assert self.res.status_code == self.validate\nE                   assert 404 == 200\nE                    +  where 404 = <Response [404]>.status_code\nE                    +    where <Response [404]> = <testcase_webapi.profiles.test_get_profile.TestGetProfile object at 0x00000248E2D503A0>.res\nE                    +  and   200 = <testcase_webapi.profiles.test_get_profile.TestGetProfile object at 0x00000248E2D503A0>.validate\n\ntestcase_webapi\\profiles\\test_get_profile.py:64: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":1,"retriesStatusChange":false,"beforeStages":[{"name":"_xunit_setup_class_fixture_TestGetProfile","time":{"start":1678807299821,"stop":1678807308725,"duration":8904},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":0,"stepsCount":0,"hasContent":false},{"name":"logger","time":{"start":1678807299821,"stop":1678807299821,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":0,"stepsCount":0,"hasContent":false},{"name":"_xunit_setup_method_fixture_TestGetProfile","time":{"start":1678807308726,"stop":1678807308726,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":0,"stepsCount":0,"hasContent":false}],"testStage":{"description":"通过一张存在的会员卡号，查询档案","status":"failed","statusMessage":"AssertionError: assert 404 == 200\n +  where 404 = <Response [404]>.status_code\n +    where <Response [404]> = <testcase_webapi.profiles.test_get_profile.TestGetProfile object at 0x00000248E2D503A0>.res\n +  and   200 = <testcase_webapi.profiles.test_get_profile.TestGetProfile object at 0x00000248E2D503A0>.validate","statusTrace":"self = <testcase_webapi.profiles.test_get_profile.TestGetProfile object at 0x00000248E2D503A0>\ndata = {'description': '通过一张存在的会员卡号，查询档案', 'feature': 'Profiles模块', 'request': {'body': {'params': {'membershipCardNumber': '...zmLfCFq-68po54QJSA', 'Content-Type': 'application/json'}, 'method': 'GET', 'url': '/profiles/profile'}, 'skip': 0, ...}\n\n    @allure.link(name=\"点击查看接口swagger\", url=read_config_yaml('web_api', 'url') +\n                                           '/docs/index#!/Profiles/Profiles_GetProfile')\n    @allure.story('/profiles/profile   通过卡号、手机号、证件号、Email或外部会员号 获取一条会员档案信息')\n    @pytest.mark.parametrize('data', read_testcase_webapi_yaml(\"profiles/test_get_profile.yaml\"))\n    def test_get_profile(self, data):\n        allure.dynamic.title(data['title'])\n        allure.dynamic.description(data['description'])\n        # 判断是否跳过这条用例\n        skip = data['skip']\n        if skip == 1:\n            logger.info(f'是否跳过这条测试用例：{skip} 跳过')\n            pytest.skip(f'因为用例中skip值为{skip}，所以跳过本条用例')\n        elif skip == 0:\n            logger.info(f'用例中skip值为:{skip} 继续执行用例')\n            # 获取请求用的参数\n            self.url = '/api/v' + read_config_yaml('web_api', 'version') + \\\n                       data['request']['url']\n            self.method = data['request']['method']\n            # 更换headers的token\n            if data['request']['headers']['Authorization'] is None:\n                data['request']['headers']['Authorization'] = read_extract_yaml('api_token')\n            self.headers = data['request']['headers']\n            self.body = data['request']['body']\n            self.validate = data['validate']['codes']\n            logger.info(f'获取参数url:{self.url},method:{self.method},headers:{self.headers},params:{self.body}')\n            try:\n                self.res = RestClient(read_config_yaml('web_api', 'url')).request(url=self.url, method=self.method,\n                                                                                  headers=self.headers, **self.body)\n                # 上传响应报文\n                allure.attach(self.res.text, 'response body')\n            except Exception as e:\n                logger.exception(f'Exception信息：\\n + {e}')\n                logger.error(f'返回报文是：{self.res}')\n            finally:\n                success_code = (200, 201, 202, 203, 204)\n                failed_code = (400, 401, 402, 403, 404, 500, 501, 502, 503, 504)\n                if self.res.status_code in success_code:\n                    logger.info(f'响应状态码为：{self.res.status_code}')\n                    assert self.res.status_code == self.validate\n                    assert self.res.json()['id'] == data['validate']['equals']\n                elif self.res.status_code in failed_code:\n                    logger.info(f'响应状态码为：{self.res.status_code}')\n>                   assert self.res.status_code == self.validate\nE                   assert 404 == 200\nE                    +  where 404 = <Response [404]>.status_code\nE                    +    where <Response [404]> = <testcase_webapi.profiles.test_get_profile.TestGetProfile object at 0x00000248E2D503A0>.res\nE                    +  and   200 = <testcase_webapi.profiles.test_get_profile.TestGetProfile object at 0x00000248E2D503A0>.validate\n\ntestcase_webapi\\profiles\\test_get_profile.py:64: AssertionError","steps":[],"attachments":[{"uid":"44ddada140eec54e","name":"response body","source":"44ddada140eec54e.attach","type":"text/plain","size":56},{"uid":"d0196fa757e1fe5a","name":"log","source":"d0196fa757e1fe5a.txt","type":"text/plain","size":3235}],"parameters":[],"shouldDisplayMessage":true,"attachmentsCount":2,"stepsCount":0,"hasContent":true},"afterStages":[{"name":"_xunit_setup_method_fixture_TestGetProfile::0","time":{"start":1678807332540,"stop":1678807332540,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":0,"stepsCount":0,"hasContent":false},{"name":"_xunit_setup_class_fixture_TestGetProfile::0","time":{"start":1678807333347,"stop":1678807333347,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":0,"stepsCount":0,"hasContent":false},{"name":"logger::0","time":{"start":1678807333348,"stop":1678807333348,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":0,"stepsCount":0,"hasContent":false}],"labels":[{"name":"feature","value":"Profiles模块"},{"name":"epic","value":"LPS_Web_API 接口自动化测试"},{"name":"severity","value":"critical"},{"name":"story","value":"/profiles/profile   通过卡号、手机号、证件号、Email或外部会员号 获取一条会员档案信息"},{"name":"parentSuite","value":"testcase_webapi.profiles"},{"name":"suite","value":"test_get_profile"},{"name":"subSuite","value":"TestGetProfile"},{"name":"host","value":"LAPTOP-22L82K2V"},{"name":"thread","value":"17292-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"testcase_webapi.profiles.test_get_profile"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[{"name":"点击查看接口swagger","url":"https://kunlun-staging.shijicloud.com/LPS_Web_API320release/docs/index#!/Profiles/Profiles_GetProfile","type":"link"}],"hidden":false,"retry":false,"extra":{"severity":"critical","retries":[{"uid":"e5bab0f80eeb42d5","status":"failed","statusDetails":"AssertionError: assert 404 == 200\n +  where 404 = <Response [404]>.status_code\n +    where <Response [404]> = <testcase_webapi.profiles.test_get_profile.TestGetProfile object at 0x0000011EFF516340>.res\n +  and   200 = <testcase_webapi.profiles.test_get_profile.TestGetProfile object at 0x0000011EFF516340>.validate","time":{"start":1678802792195,"stop":1678802808250,"duration":16055}}],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"tags":[]},"source":"9cdfc4b8b6542dfd.json","parameterValues":[]}