{"uid":"5c2c59c0c3e54535","name":"正常手机号查询","fullName":"testcase_webapi.profiles.test_get_profile.TestGetProfile#test_get_profile","historyId":"1bfe0eb08c324f04d0581b8be137f038","time":{"start":1678802808858,"stop":1678802809074,"duration":216},"description":"mobile和mobileCountryNumber均正常","descriptionHtml":"<p>mobile和mobileCountryNumber均正常</p>\n","status":"failed","statusMessage":"AssertionError: assert 401 == 200\n +  where 401 = <Response [401]>.status_code\n +    where <Response [401]> = <testcase_webapi.profiles.test_get_profile.TestGetProfile object at 0x0000011EFF5161F0>.res\n +  and   200 = <testcase_webapi.profiles.test_get_profile.TestGetProfile object at 0x0000011EFF5161F0>.validate","statusTrace":"self = <testcase_webapi.profiles.test_get_profile.TestGetProfile object at 0x0000011EFF5161F0>\ndata = {'description': 'mobile和mobileCountryNumber均正常', 'feature': 'Profiles模块', 'request': {'body': {'params': {'mobile': '1...thorization': '123', 'Content-Type': 'application/json'}, 'method': 'GET', 'url': '/profiles/profile'}, 'skip': 0, ...}\n\n    @allure.link(name=\"点击查看接口swagger\", url=read_config_yaml('web_api', 'url') +\n                                           '/docs/index#!/Profiles/Profiles_GetProfile')\n    @allure.story('/profiles/profile   通过卡号、手机号、证件号、Email或外部会员号 获取一条会员档案信息')\n    @pytest.mark.parametrize('data', read_testcase_webapi_yaml(\"profiles/test_get_profile.yaml\"))\n    def test_get_profile(self, data):\n        allure.dynamic.title(data['title'])\n        allure.dynamic.description(data['description'])\n        # 判断是否跳过这条用例\n        skip = data['skip']\n        if skip == 1:\n            logger.info(f'是否跳过这条测试用例：{skip} 跳过')\n            pytest.skip(f'因为用例中skip值为{skip}，所以跳过本条用例')\n        elif skip == 0:\n            logger.info(f'用例中skip值为:{skip} 继续执行用例')\n            # 获取请求用的参数\n            self.url = '/api/v' + read_config_yaml('web_api', 'version') + \\\n                       data['request']['url']\n            self.method = data['request']['method']\n            # 更换headers的token\n            if data['request']['headers']['Authorization'] is None:\n                data['request']['headers']['Authorization'] = read_extract_yaml('api_token')\n            self.headers = data['request']['headers']\n            self.body = data['request']['body']\n            self.validate = data['validate']['codes']\n            logger.info(f'获取参数url:{self.url},method:{self.method},headers:{self.headers},params:{self.body}')\n            try:\n                self.res = RestClient(read_config_yaml('web_api', 'url')).request(url=self.url, method=self.method,\n                                                                                  headers=self.headers, **self.body)\n                # 上传响应报文\n                allure.attach(self.res.text, 'response body')\n            except Exception as e:\n                logger.exception(f'Exception信息：\\n + {e}')\n                logger.error(f'返回报文是：{self.res}')\n            finally:\n                success_code = (200, 201, 202, 203, 204)\n                failed_code = (400, 401, 402, 403, 404, 500, 501, 502, 503, 504)\n                if self.res.status_code in success_code:\n                    logger.info(f'响应状态码为：{self.res.status_code}')\n                    assert self.res.status_code == self.validate\n                    assert self.res.json()['id'] == data['validate']['equals']\n                elif self.res.status_code in failed_code:\n                    logger.info(f'响应状态码为：{self.res.status_code}')\n>                   assert self.res.status_code == self.validate\nE                   assert 401 == 200\nE                    +  where 401 = <Response [401]>.status_code\nE                    +    where <Response [401]> = <testcase_webapi.profiles.test_get_profile.TestGetProfile object at 0x0000011EFF5161F0>.res\nE                    +  and   200 = <testcase_webapi.profiles.test_get_profile.TestGetProfile object at 0x0000011EFF5161F0>.validate\n\ntestcase_webapi\\profiles\\test_get_profile.py:64: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"logger","time":{"start":1678802784871,"stop":1678802784873,"duration":2},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":0,"stepsCount":0,"hasContent":false},{"name":"_xunit_setup_class_fixture_TestGetProfile","time":{"start":1678802784873,"stop":1678802792194,"duration":7321},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":0,"stepsCount":0,"hasContent":false},{"name":"_xunit_setup_method_fixture_TestGetProfile","time":{"start":1678802808857,"stop":1678802808858,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":0,"stepsCount":0,"hasContent":false}],"testStage":{"description":"mobile和mobileCountryNumber均正常","status":"failed","statusMessage":"AssertionError: assert 401 == 200\n +  where 401 = <Response [401]>.status_code\n +    where <Response [401]> = <testcase_webapi.profiles.test_get_profile.TestGetProfile object at 0x0000011EFF5161F0>.res\n +  and   200 = <testcase_webapi.profiles.test_get_profile.TestGetProfile object at 0x0000011EFF5161F0>.validate","statusTrace":"self = <testcase_webapi.profiles.test_get_profile.TestGetProfile object at 0x0000011EFF5161F0>\ndata = {'description': 'mobile和mobileCountryNumber均正常', 'feature': 'Profiles模块', 'request': {'body': {'params': {'mobile': '1...thorization': '123', 'Content-Type': 'application/json'}, 'method': 'GET', 'url': '/profiles/profile'}, 'skip': 0, ...}\n\n    @allure.link(name=\"点击查看接口swagger\", url=read_config_yaml('web_api', 'url') +\n                                           '/docs/index#!/Profiles/Profiles_GetProfile')\n    @allure.story('/profiles/profile   通过卡号、手机号、证件号、Email或外部会员号 获取一条会员档案信息')\n    @pytest.mark.parametrize('data', read_testcase_webapi_yaml(\"profiles/test_get_profile.yaml\"))\n    def test_get_profile(self, data):\n        allure.dynamic.title(data['title'])\n        allure.dynamic.description(data['description'])\n        # 判断是否跳过这条用例\n        skip = data['skip']\n        if skip == 1:\n            logger.info(f'是否跳过这条测试用例：{skip} 跳过')\n            pytest.skip(f'因为用例中skip值为{skip}，所以跳过本条用例')\n        elif skip == 0:\n            logger.info(f'用例中skip值为:{skip} 继续执行用例')\n            # 获取请求用的参数\n            self.url = '/api/v' + read_config_yaml('web_api', 'version') + \\\n                       data['request']['url']\n            self.method = data['request']['method']\n            # 更换headers的token\n            if data['request']['headers']['Authorization'] is None:\n                data['request']['headers']['Authorization'] = read_extract_yaml('api_token')\n            self.headers = data['request']['headers']\n            self.body = data['request']['body']\n            self.validate = data['validate']['codes']\n            logger.info(f'获取参数url:{self.url},method:{self.method},headers:{self.headers},params:{self.body}')\n            try:\n                self.res = RestClient(read_config_yaml('web_api', 'url')).request(url=self.url, method=self.method,\n                                                                                  headers=self.headers, **self.body)\n                # 上传响应报文\n                allure.attach(self.res.text, 'response body')\n            except Exception as e:\n                logger.exception(f'Exception信息：\\n + {e}')\n                logger.error(f'返回报文是：{self.res}')\n            finally:\n                success_code = (200, 201, 202, 203, 204)\n                failed_code = (400, 401, 402, 403, 404, 500, 501, 502, 503, 504)\n                if self.res.status_code in success_code:\n                    logger.info(f'响应状态码为：{self.res.status_code}')\n                    assert self.res.status_code == self.validate\n                    assert self.res.json()['id'] == data['validate']['equals']\n                elif self.res.status_code in failed_code:\n                    logger.info(f'响应状态码为：{self.res.status_code}')\n>                   assert self.res.status_code == self.validate\nE                   assert 401 == 200\nE                    +  where 401 = <Response [401]>.status_code\nE                    +    where <Response [401]> = <testcase_webapi.profiles.test_get_profile.TestGetProfile object at 0x0000011EFF5161F0>.res\nE                    +  and   200 = <testcase_webapi.profiles.test_get_profile.TestGetProfile object at 0x0000011EFF5161F0>.validate\n\ntestcase_webapi\\profiles\\test_get_profile.py:64: AssertionError","steps":[],"attachments":[{"uid":"6604390d4660d1fd","name":"response body","source":"6604390d4660d1fd.attach","type":"text/plain","size":61},{"uid":"ac7e3ea5fbfbd377","name":"log","source":"ac7e3ea5fbfbd377.txt","type":"text/plain","size":1327}],"parameters":[],"shouldDisplayMessage":true,"attachmentsCount":2,"stepsCount":0,"hasContent":true},"afterStages":[{"name":"_xunit_setup_method_fixture_TestGetProfile::0","time":{"start":1678802809081,"stop":1678802809081,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":0,"stepsCount":0,"hasContent":false},{"name":"_xunit_setup_class_fixture_TestGetProfile::0","time":{"start":1678802809251,"stop":1678802809252,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":0,"stepsCount":0,"hasContent":false},{"name":"logger::0","time":{"start":1678802809253,"stop":1678802809253,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":0,"stepsCount":0,"hasContent":false}],"labels":[{"name":"story","value":"/profiles/profile   通过卡号、手机号、证件号、Email或外部会员号 获取一条会员档案信息"},{"name":"feature","value":"Profiles模块"},{"name":"severity","value":"critical"},{"name":"epic","value":"LPS_Web_API 接口自动化测试"},{"name":"parentSuite","value":"testcase_webapi.profiles"},{"name":"suite","value":"test_get_profile"},{"name":"subSuite","value":"TestGetProfile"},{"name":"host","value":"LAPTOP-22L82K2V"},{"name":"thread","value":"18204-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"testcase_webapi.profiles.test_get_profile"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[{"name":"点击查看接口swagger","url":"https://kunlun-staging.shijicloud.com/LPS_Web_API320release/docs/index#!/Profiles/Profiles_GetProfile","type":"link"}],"hidden":true,"retry":true,"extra":{"categories":[],"tags":[]},"source":"5c2c59c0c3e54535.json","parameterValues":[]}